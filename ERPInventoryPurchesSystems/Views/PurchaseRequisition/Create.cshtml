@model ERPInventoryPurchesSystems.Models.PR.PurchesRequstiaon

@{
    ViewData["Title"] = "Create Purchase Requisition";
    var items = ViewBag.Items as SelectList;
}

<h2 class="mb-4">Create Purchase Requisition</h2>

<form asp-action="Create" method="post">
    @Html.AntiForgeryToken()
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>

    <div class="mb-3">
        <label asp-for="PRDate" class="form-label"></label>
        <input asp-for="PRDate" class="form-control" type="date" value="@DateTime.Now.ToString("yyyy-MM-dd")" />
        <span asp-validation-for="PRDate" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="DepartmentCode" class="form-label">Department</label>
        <select asp-for="DepartmentCode" class="form-control" asp-items="ViewBag.Departments"></select>
        <span asp-validation-for="DepartmentCode" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="SubmittedByUserID" class="form-label">Submitted By</label>
        <select asp-for="SubmittedByUserID" class="form-control" asp-items="ViewBag.Users"></select>
        <span asp-validation-for="SubmittedByUserID" class="text-danger"></span>
    </div>

    <!-- Hidden Status Field -->
    <input type="hidden" asp-for="Status" value="Pending" />

    <h4 class="mt-4">Items</h4>
    <table class="table table-bordered" id="itemTable">
        <thead class="table-light">
            <tr>
                <th>Item</th>
                <th>Quantity</th>
                <th>Required Date</th>
                <th>Justification</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>

    <button type="button" class="btn btn-secondary mb-3" onclick="addItemRow()">Add Item</button>
    <br />
    <button type="submit" class="btn btn-primary">Submit</button>
    <button type="button" class="btn btn-secondary" onclick="window.history.back();">Back</button>
</form>

<!-- Hidden Template for Item Row -->
<div id="itemRowTemplate" style="display:none;">
    <table>
        <tr>
            <td>
                <select class="form-control item-select">
                    @if (items != null)
                    {
                        foreach (var item in items)
                        {
                            <option value="@item.Value">@item.Text - @item.Value</option>
                        }
                    }
                </select>
                <span class="text-danger field-validation-valid" data-valmsg-for="Items[0].ItemCode" data-valmsg-replace="true"></span>
            </td>
            <td>
                <input type="number" class="form-control quantity-input" />
                <span class="text-danger field-validation-valid" data-valmsg-for="Items[0].Quantity" data-valmsg-replace="true"></span>
            </td>
            <td>
                <input type="date" class="form-control date-input" />
                <span class="text-danger field-validation-valid" data-valmsg-for="Items[0].RequiredDate" data-valmsg-replace="true"></span>
            </td>
            <td>
                <input type="text" class="form-control justification-input" />
                <span class="text-danger field-validation-valid" data-valmsg-for="Items[0].Justification" data-valmsg-replace="true"></span>
            </td>
            <td>
                <button type="button" class="btn btn-danger" onclick="removeRow(this)">Remove</button>
            </td>
        </tr>
    </table>
</div>

@section Scripts {
    <script>
        let itemIndex = 0;

        function addItemRow() {
            const template = document.querySelector("#itemRowTemplate table").cloneNode(true);
            const row = template.querySelector("tr");

            row.querySelector(".item-select").setAttribute("name", `Items[${itemIndex}].ItemCode`);
            row.querySelector(".quantity-input").setAttribute("name", `Items[${itemIndex}].Quantity`);
            row.querySelector(".date-input").setAttribute("name", `Items[${itemIndex}].RequiredDate`);
            row.querySelector(".justification-input").setAttribute("name", `Items[${itemIndex}].Justification`);

            // Update validation spans
            row.querySelector('[data-valmsg-for="Items[0].ItemCode"]').setAttribute("data-valmsg-for", `Items[${itemIndex}].ItemCode`);
            row.querySelector('[data-valmsg-for="Items[0].Quantity"]').setAttribute("data-valmsg-for", `Items[${itemIndex}].Quantity`);
            row.querySelector('[data-valmsg-for="Items[0].RequiredDate"]').setAttribute("data-valmsg-for", `Items[${itemIndex}].RequiredDate`);
            row.querySelector('[data-valmsg-for="Items[0].Justification"]').setAttribute("data-valmsg-for", `Items[${itemIndex}].Justification`);

            document.querySelector("#itemTable tbody").appendChild(row);
            itemIndex++;
        }

        function removeRow(button) {
            const row = button.closest("tr");
            row.remove();
        }
    </script>

    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
