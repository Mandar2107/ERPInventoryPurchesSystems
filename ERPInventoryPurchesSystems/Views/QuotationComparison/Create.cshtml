@model ERPInventoryPurchesSystems.Models.PR.QuotationComparison

@{
    ViewData["Title"] = "Create Quotation";
    var vendors = ViewBag.Vendors as SelectList;
}

<h2 class="mb-4">Create Quotation Comparison</h2>

<form asp-action="Create" method="post">
    <div class="form-group mb-3">
        <label asp-for="PRId">PR</label>
        <select asp-for="PRId" asp-items="ViewBag.PRs" class="form-control" id="prSelect"></select>
    </div>

    <div class="form-group mb-3">
        <label asp-for="DepartmentCode">Department</label>
        <select asp-for="DepartmentCode" asp-items="ViewBag.Departments" class="form-control"></select>
    </div>

    <div class="form-group mb-4">
        <label asp-for="RequestedByUserId">Requested By</label>
        <select asp-for="RequestedByUserId" asp-items="ViewBag.Users" class="form-control"></select>
    </div>

    <h4>Vendor Quotations</h4>
    <table class="table table-bordered" id="quotationTable">
        <thead class="table-light">
            <tr>
                <th>Vendor</th>
                <th>Item</th>
                <th>Quoted Qty</th>
                <th>Unit Price</th>
                <th>Total Price</th>
                <th>Delivery Time</th>
                <th>Rating</th>
                <th>Remarks</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>

    <button type="button" class="btn btn-secondary mb-3" onclick="addQuotationRow()">Add Quotation</button>
    <br />
    <button type="submit" class="btn btn-primary">Submit</button>
</form>

<!-- Template Row -->
<div id="quotationRowTemplate" style="display:none;">
    <table>
        <tr>
            <td>
                <select class="form-control vendor-select">
                    @foreach (var vendor in vendors)
                    {
                        <option value="@vendor.Value">@vendor.Text - @vendor.Value</option>
                    }
                </select>
            </td>
            <td>
                <select class="form-control item-select">
                    <option value="">-- Select Item --</option>
                </select>
            </td>
            <td><input type="number" class="form-control qty-input" /></td>
            <td><input type="number" class="form-control unitprice-input" /></td>
            <td><input type="number" class="form-control totalprice-input" readonly /></td>
            <td><input type="text" class="form-control delivery-input" /></td>
            <td><input type="number" class="form-control rating-input" min="1" max="5" /></td>
            <td><input type="text" class="form-control remarks-input" /></td>
            <td><button type="button" class="btn btn-danger" onclick="removeRow(this)">Remove</button></td>
        </tr>
    </table>
</div>

@section Scripts {
    <script>
        let rowIndex = 0;
        let prItems = [];

        document.getElementById("prSelect").addEventListener("change", function () {
            const prId = this.value;
            fetch(`/QuotationComparison/GetItemsByPR?prId=${prId}`)
                .then(response => response.json())
                .then(data => {
                    prItems = data;
                    updateAllItemDropdowns();
                });
        });

        function updateAllItemDropdowns() {
            const itemSelects = document.querySelectorAll('.item-select');
            itemSelects.forEach(select => {
                updateItemDropdown(select);
            });
        }

        function updateItemDropdown(select) {
            select.innerHTML = '<option value="">-- Select Item --</option>';
            prItems.forEach(item => {
                const option = document.createElement('option');
                option.value = item.value;
                option.text = `${item.text} - ${item.value}`;
                select.appendChild(option);
            });
        }

        function calculateTotalPrice(row) {
            const qty = parseFloat(row.querySelector(".qty-input").value) || 0;
            const unitPrice = parseFloat(row.querySelector(".unitprice-input").value) || 0;
            const totalPriceField = row.querySelector(".totalprice-input");
            totalPriceField.value = (qty * unitPrice).toFixed(2);
        }

        function addQuotationRow() {
            const template = document.querySelector("#quotationRowTemplate table").cloneNode(true);
            const row = template.querySelector("tr");

            row.querySelector(".vendor-select").setAttribute("name", `Items[${rowIndex}].VendorCode`);
            const itemSelect = row.querySelector(".item-select");
            itemSelect.setAttribute("name", `Items[${rowIndex}].ItemCode`);
            updateItemDropdown(itemSelect);

            const qtyInput = row.querySelector(".qty-input");
            const unitPriceInput = row.querySelector(".unitprice-input");
            const totalPriceInput = row.querySelector(".totalprice-input");

            qtyInput.setAttribute("name", `Items[${rowIndex}].QuotedQuantity`);
            unitPriceInput.setAttribute("name", `Items[${rowIndex}].UnitPrice`);
            totalPriceInput.setAttribute("name", `Items[${rowIndex}].TotalPrice`);

            qtyInput.addEventListener("input", () => calculateTotalPrice(row));
            unitPriceInput.addEventListener("input", () => calculateTotalPrice(row));

            row.querySelector(".delivery-input").setAttribute("name", `Items[${rowIndex}].DeliveryTime`);
            row.querySelector(".rating-input").setAttribute("name", `Items[${rowIndex}].VendorRating`);
            row.querySelector(".remarks-input").setAttribute("name", `Items[${rowIndex}].Remarks`);

            document.querySelector("#quotationTable tbody").appendChild(row);
            rowIndex++;
        }

        function removeRow(button) {
            const row = button.closest("tr");
            row.remove();
        }
    </script>
}
