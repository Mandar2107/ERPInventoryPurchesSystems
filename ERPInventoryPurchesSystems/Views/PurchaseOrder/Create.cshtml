@model ERPInventoryPurchesSystems.Models.PR.PurchaseOrder
@{
    ViewData["Title"] = "Create Purchase Order";
    var items = ViewBag.Items as SelectList;
    var isReadOnly = ViewBag.IsReadOnly ?? false;
    var disabled = isReadOnly ? "disabled" : null;
}

<h2 class="mb-4">Create Purchase Order</h2>

<form asp-action="Create" method="post">
    <div class="form-group mb-3">
        <label asp-for="PRId">Purchase Requisition</label>
        <select asp-for="PRId" asp-items="ViewBag.PRs" class="form-control" disabled="@disabled"></select>
        <input type="hidden" name="PRId" value="@Model.PRId" />
    </div>

    <input type="hidden" name="DepartmentCode" id="DepartmentCode" value="@Model.DepartmentCode" />
    <input type="hidden" name="RequestedByUserId" id="RequestedByUserId" value="@Model.RequestedByUserId" />
    <div class="form-group mb-3">
        <label>Requested By</label>
        <input type="text" id="RequestedByName" class="form-control" value="@ViewBag.RequestedByName" readonly />
    </div>

    <h4>Items</h4>
    <table class="table table-bordered" id="poItemsTable">
        <thead class="table-light">
            <tr>
                <th>Item</th>
                <th>Quantity</th>
                <th>Unit Price</th>
                <th>Total Price</th>
                <th>Delivery Date</th>
                <th>Delivery Terms</th>
                <th>Vendor</th>
                @if (!isReadOnly)
                {
                    <th>Action</th>
                }
            </tr>
        </thead>
        <tbody></tbody>
    </table>

    @if (!isReadOnly)
    {
        <button type="button" class="btn btn-secondary mb-3" onclick="addPOItem()">Add Item</button>
        <br />
        <button type="submit" class="btn btn-primary">Submit</button>
    }
    <a asp-action="Index" class="btn btn-outline-secondary ms-2">Back to List</a>
</form>

<!-- Template Row -->
<div id="poItemTemplate" style="display:none;">
    <table>
        <tr>
            <td>
                <select class="form-control item-select">
                    @foreach (var item in items)
                    {
                        <option value="@item.Value">@item.Text</option>
                    }
                </select>
            </td>
            <td><input type="number" class="form-control qty-input" /></td>
            <td><input type="number" class="form-control unitprice-input" /></td>
            <td><input type="number" class="form-control totalprice-input" readonly /></td>
            <td><input type="date" class="form-control date-input" /></td>
            <td><input type="text" class="form-control terms-input" /></td>
            <td>
                <input type="hidden" class="vendor-code-input" />
                <input type="text" class="form-control vendor-name-input" readonly />
            </td>
            @if (!isReadOnly)
            {
                <td><button type="button" class="btn btn-danger" onclick="removeRow(this)">Remove</button></td>
            }
        </tr>
    </table>
</div>
@section Scripts {
    <script>
        let poIndex = 0;
        const isReadOnly = @((ViewBag.IsReadOnly ?? false).ToString().ToLower());

        function addPOItem(itemData = null) {
            const template = document.querySelector("#poItemTemplate table").cloneNode(true);
            const row = template.querySelector("tr");

            row.querySelector(".item-select").setAttribute("name", `Items[${poIndex}].ItemCode`);
            row.querySelector(".qty-input").setAttribute("name", `Items[${poIndex}].Quantity`);
            row.querySelector(".unitprice-input").setAttribute("name", `Items[${poIndex}].UnitPrice`);
            row.querySelector(".totalprice-input").setAttribute("name", `Items[${poIndex}].TotalPrice`);
            row.querySelector(".date-input").setAttribute("name", `Items[${poIndex}].DeliveryDate`);
            row.querySelector(".terms-input").setAttribute("name", `Items[${poIndex}].DeliveryTerms`);
            row.querySelector(".vendor-code-input").setAttribute("name", `Items[${poIndex}].VendorCode`);

            if (itemData) {
                row.querySelector(".item-select").value = itemData.itemCode;
                row.querySelector(".qty-input").value = itemData.quantity;
                row.querySelector(".unitprice-input").value = itemData.unitPrice;
                row.querySelector(".totalprice-input").value = (itemData.quantity * itemData.unitPrice).toFixed(2);
                row.querySelector(".vendor-code-input").value = itemData.vendorCode || "";
                row.querySelector(".vendor-name-input").value = itemData.vendorName || "";
                row.querySelector(".date-input").value = new Date().toISOString().split('T')[0];
                row.querySelector(".terms-input").value = "Standard";
            }

            if (isReadOnly) {
                row.querySelectorAll("input, select").forEach(el => el.disabled = true);
                const removeBtn = row.querySelector(".btn-danger");
                if (removeBtn) removeBtn.style.display = "none";
            }

            document.querySelector("#poItemsTable tbody").appendChild(row);
            poIndex++;
        }

        // Load items from model
        @if (Model.Items != null && Model.Items.Any())
        {
            foreach (var item in Model.Items)
            {
                <text>
                            addPOItem({
                                itemCode: "@item.ItemCode",
                                quantity: @item.Quantity,
                                unitPrice: @item.UnitPrice",
                                vendorCode: "@item.VendorCode",
                                vendorName: "@item.Vendor?.VendorName"
                            });
                </text>
            }
        }

        function removeRow(button) {
            button.closest("tr").remove();
        }
    </script>
}
